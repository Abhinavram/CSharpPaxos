The goal of this project was just to let me understand Multi Paxos.
Now I do :) but this mean:

1/ The design isn't good as I discovered paxos as I go. I shouldn't have gone that road (especially mixing strategy/state/roles and messages)
2/ It should have been done in WCF or on top of existing framework if we wanted something really robust.
3/ I paid no attention to write proper test code (come on man! I'm doing this over week end!). There is just integration tests.

So this is just here for education purposes.
It's a piece of garbage, but it's working though!

If you want to know how it works, here is a basic flow:

Client   Replica   Leader      Acceptor     All other replicas
   |       |         |          |  |  |       |  | --- First Request ---
   X------>X-------->|          |  |  |       |  |  Request
   |       |         X--------->|->|->|       |  |  Ballot please
   |       |         |<---------X--X--X       |  |  You got your ballot
   |       |         X--------->|->|->|       |  |  Here is the value
   |       |         |<---------X--X--X       |->|  We accept it
   |       |<--------X----------------------->X--X  Leader informs everyone
   |<------X         |          |  |  |       |  |  Client is updated


An acceptor accept to kind of requests from leaders: SolicitateBallot and RequestVote.

SolicitateBallot give the opportunity to choose which leader among all will organize the vote.
The leader that will be chosen is the one that got the higher ballot approved by more than half of the acceptors.

A ballot is a unique id generated by the leader. Each leader keeps an integer that they increment in memory and aggregate it with their current serverid.

When a leader is elected, he can organizes a vote.
The leader will ask acceptor to vote for its value. 
If no other leaders get a higher ballot until more than half of acceptor approve the vote it means the leader win the vote. 
When the leader win the vote, it will notify all replicas that the value got elected and paxos is completed.

If another leader get a higher ballot before the vote ends, it will organize the vote with the value previously proposed by the previous leader.
This leader will "finish" the work of the previous one.

When a leader loose an election because its ballot is too low, he get the last up to date highest ballot number from acceptors which give him more chance to win the next election.
He will also retry not instantatly to avoid to have an infinite loop of a leader getting the highest ballot from another leader before it ends the vote.